
package lab3;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "LaptopWebService", targetNamespace = "http://lab3/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface LaptopWebService {


    /**
     * 
     * @param videoCard
     * @param name
     * @param cpu
     * @param hdd
     * @param ram
     * @return
     *     returns java.util.List<lab3.Laptop>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLaptopsByFilter", targetNamespace = "http://lab3/", className = "lab3.GetLaptopsByFilter")
    @ResponseWrapper(localName = "getLaptopsByFilterResponse", targetNamespace = "http://lab3/", className = "lab3.GetLaptopsByFilterResponse")
    @Action(input = "http://lab3/LaptopWebService/getLaptopsByFilterRequest", output = "http://lab3/LaptopWebService/getLaptopsByFilterResponse")
    public List<Laptop> getLaptopsByFilter(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "CPU", targetNamespace = "")
        String cpu,
        @WebParam(name = "RAM", targetNamespace = "")
        String ram,
        @WebParam(name = "video_card", targetNamespace = "")
        String videoCard,
        @WebParam(name = "HDD", targetNamespace = "")
        String hdd);

    /**
     * 
     * @return
     *     returns java.util.List<lab3.Laptop>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLaptops", targetNamespace = "http://lab3/", className = "lab3.GetLaptops")
    @ResponseWrapper(localName = "getLaptopsResponse", targetNamespace = "http://lab3/", className = "lab3.GetLaptopsResponse")
    @Action(input = "http://lab3/LaptopWebService/getLaptopsRequest", output = "http://lab3/LaptopWebService/getLaptopsResponse")
    public List<Laptop> getLaptops();

    /**
     * 
     * @param laptop
     * @return
     *     returns lab3.ResultStatusOperation
     * @throws BaseServiceException_Exception
     * @throws AuthException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateLaptop", targetNamespace = "http://lab3/", className = "lab3.UpdateLaptop")
    @ResponseWrapper(localName = "updateLaptopResponse", targetNamespace = "http://lab3/", className = "lab3.UpdateLaptopResponse")
    @Action(input = "http://lab3/LaptopWebService/updateLaptopRequest", output = "http://lab3/LaptopWebService/updateLaptopResponse", fault = {
        @FaultAction(className = BaseServiceException_Exception.class, value = "http://lab3/LaptopWebService/updateLaptop/Fault/BaseServiceException"),
        @FaultAction(className = AuthException.class, value = "http://lab3/LaptopWebService/updateLaptop/Fault/AuthException")
    })
    public ResultStatusOperation updateLaptop(
        @WebParam(name = "laptop", targetNamespace = "")
        Laptop laptop)
        throws AuthException, BaseServiceException_Exception
    ;

    /**
     * 
     * @return
     *     returns lab3.ResultStatusOperation
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteAllLaptops", targetNamespace = "http://lab3/", className = "lab3.DeleteAllLaptops")
    @ResponseWrapper(localName = "deleteAllLaptopsResponse", targetNamespace = "http://lab3/", className = "lab3.DeleteAllLaptopsResponse")
    @Action(input = "http://lab3/LaptopWebService/deleteAllLaptopsRequest", output = "http://lab3/LaptopWebService/deleteAllLaptopsResponse")
    public ResultStatusOperation deleteAllLaptops();

    /**
     * 
     * @param id
     * @return
     *     returns lab3.ResultStatusOperation
     * @throws BaseServiceException_Exception
     * @throws AuthException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteLaptop", targetNamespace = "http://lab3/", className = "lab3.DeleteLaptop")
    @ResponseWrapper(localName = "deleteLaptopResponse", targetNamespace = "http://lab3/", className = "lab3.DeleteLaptopResponse")
    @Action(input = "http://lab3/LaptopWebService/deleteLaptopRequest", output = "http://lab3/LaptopWebService/deleteLaptopResponse", fault = {
        @FaultAction(className = BaseServiceException_Exception.class, value = "http://lab3/LaptopWebService/deleteLaptop/Fault/BaseServiceException"),
        @FaultAction(className = AuthException.class, value = "http://lab3/LaptopWebService/deleteLaptop/Fault/AuthException")
    })
    public ResultStatusOperation deleteLaptop(
        @WebParam(name = "id", targetNamespace = "")
        Integer id)
        throws AuthException, BaseServiceException_Exception
    ;

    /**
     * 
     * @param laptop
     * @return
     *     returns lab3.ResultStatusOperation
     * @throws BaseServiceException_Exception
     * @throws AuthException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "insertLaptop", targetNamespace = "http://lab3/", className = "lab3.InsertLaptop")
    @ResponseWrapper(localName = "insertLaptopResponse", targetNamespace = "http://lab3/", className = "lab3.InsertLaptopResponse")
    @Action(input = "http://lab3/LaptopWebService/insertLaptopRequest", output = "http://lab3/LaptopWebService/insertLaptopResponse", fault = {
        @FaultAction(className = BaseServiceException_Exception.class, value = "http://lab3/LaptopWebService/insertLaptop/Fault/BaseServiceException"),
        @FaultAction(className = AuthException.class, value = "http://lab3/LaptopWebService/insertLaptop/Fault/AuthException")
    })
    public ResultStatusOperation insertLaptop(
        @WebParam(name = "laptop", targetNamespace = "")
        Laptop laptop)
        throws AuthException, BaseServiceException_Exception
    ;

}
